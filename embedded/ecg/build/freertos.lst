ARM GAS  C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"freertos.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.vApplicationIdleHook,"ax",%progbits
  18              		.align	1
  19              		.weak	vApplicationIdleHook
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-sp-d16
  26              	vApplicationIdleHook:
  27              	.LFB146:
  28              		.file 1 "Core/Src/freertos.c"
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****   ******************************************************************************
   4:Core/Src/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****   ******************************************************************************
   7:Core/Src/freertos.c ****   * @attention
   8:Core/Src/freertos.c ****   *
   9:Core/Src/freertos.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/freertos.c ****   * All rights reserved.</center></h2>
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/freertos.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/freertos.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/freertos.c ****   *                             www.st.com/SLA0044
  16:Core/Src/freertos.c ****   *
  17:Core/Src/freertos.c ****   ******************************************************************************
  18:Core/Src/freertos.c ****   */
  19:Core/Src/freertos.c **** /* USER CODE END Header */
  20:Core/Src/freertos.c **** 
  21:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/freertos.c **** #include "FreeRTOS.h"
  23:Core/Src/freertos.c **** #include "task.h"
  24:Core/Src/freertos.c **** #include "main.h"
  25:Core/Src/freertos.c **** 
  26:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  27:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/freertos.c **** 
  29:Core/Src/freertos.c **** /* USER CODE END Includes */
  30:Core/Src/freertos.c **** 
ARM GAS  C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s 			page 2


  31:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/freertos.c **** 
  34:Core/Src/freertos.c **** /* USER CODE END PTD */
  35:Core/Src/freertos.c **** 
  36:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  38:Core/Src/freertos.c **** 
  39:Core/Src/freertos.c **** /* USER CODE END PD */
  40:Core/Src/freertos.c **** 
  41:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  42:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  43:Core/Src/freertos.c **** 
  44:Core/Src/freertos.c **** /* USER CODE END PM */
  45:Core/Src/freertos.c **** 
  46:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  47:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  48:Core/Src/freertos.c **** 
  49:Core/Src/freertos.c **** /* USER CODE END Variables */
  50:Core/Src/freertos.c **** 
  51:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  52:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  53:Core/Src/freertos.c **** 
  54:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  55:Core/Src/freertos.c **** 
  56:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  57:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  58:Core/Src/freertos.c **** 
  59:Core/Src/freertos.c **** /* Hook prototypes */
  60:Core/Src/freertos.c **** void vApplicationIdleHook(void);
  61:Core/Src/freertos.c **** void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
  62:Core/Src/freertos.c **** void vApplicationMallocFailedHook(void);
  63:Core/Src/freertos.c **** 
  64:Core/Src/freertos.c **** /* USER CODE BEGIN 2 */
  65:Core/Src/freertos.c **** __weak void vApplicationIdleHook( void )
  66:Core/Src/freertos.c **** {
  29              		.loc 1 66 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  67:Core/Src/freertos.c ****    /* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
  68:Core/Src/freertos.c ****    to 1 in FreeRTOSConfig.h. It will be called on each iteration of the idle
  69:Core/Src/freertos.c ****    task. It is essential that code added to this hook function never attempts
  70:Core/Src/freertos.c ****    to block in any way (for example, call xQueueReceive() with a block time
  71:Core/Src/freertos.c ****    specified, or call vTaskDelay()). If the application makes use of the
  72:Core/Src/freertos.c ****    vTaskDelete() API function (as this demo application does) then it is also
  73:Core/Src/freertos.c ****    important that vApplicationIdleHook() is permitted to return to its calling
  74:Core/Src/freertos.c ****    function, because it is the responsibility of the idle task to clean up
  75:Core/Src/freertos.c ****    memory allocated by the kernel to any task that has since been deleted. */
  76:Core/Src/freertos.c **** }
  34              		.loc 1 76 1 view .LVU1
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE146:
  39              		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
  40              		.align	1
ARM GAS  C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s 			page 3


  41              		.weak	vApplicationStackOverflowHook
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv5-sp-d16
  47              	vApplicationStackOverflowHook:
  48              	.LVL0:
  49              	.LFB147:
  77:Core/Src/freertos.c **** /* USER CODE END 2 */
  78:Core/Src/freertos.c **** 
  79:Core/Src/freertos.c **** /* USER CODE BEGIN 4 */
  80:Core/Src/freertos.c **** __weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
  81:Core/Src/freertos.c **** {
  50              		.loc 1 81 1 view -0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  82:Core/Src/freertos.c ****    /* Run time stack overflow checking is performed if
  83:Core/Src/freertos.c ****    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
  84:Core/Src/freertos.c ****    called if a stack overflow is detected. */
  85:Core/Src/freertos.c **** }
  55              		.loc 1 85 1 view .LVU3
  56 0000 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE147:
  60              		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
  61              		.align	1
  62              		.weak	vApplicationMallocFailedHook
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv5-sp-d16
  68              	vApplicationMallocFailedHook:
  69              	.LFB148:
  86:Core/Src/freertos.c **** /* USER CODE END 4 */
  87:Core/Src/freertos.c **** 
  88:Core/Src/freertos.c **** /* USER CODE BEGIN 5 */
  89:Core/Src/freertos.c **** __weak void vApplicationMallocFailedHook(void)
  90:Core/Src/freertos.c **** {
  70              		.loc 1 90 1 view -0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  91:Core/Src/freertos.c ****    /* vApplicationMallocFailedHook() will only be called if
  92:Core/Src/freertos.c ****    configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h. It is a hook
  93:Core/Src/freertos.c ****    function that will get called if a call to pvPortMalloc() fails.
  94:Core/Src/freertos.c ****    pvPortMalloc() is called internally by the kernel whenever a task, queue,
  95:Core/Src/freertos.c ****    timer or semaphore is created. It is also called by various parts of the
  96:Core/Src/freertos.c ****    demo application. If heap_1.c or heap_2.c are used, then the size of the
  97:Core/Src/freertos.c ****    heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
  98:Core/Src/freertos.c ****    FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
  99:Core/Src/freertos.c ****    to query the size of free heap space that remains (although it does not
 100:Core/Src/freertos.c ****    provide information on how the remaining heap might be fragmented). */
 101:Core/Src/freertos.c **** }
  75              		.loc 1 101 1 view .LVU5
ARM GAS  C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s 			page 4


  76 0000 7047     		bx	lr
  77              		.cfi_endproc
  78              	.LFE148:
  80              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  81              		.align	1
  82              		.global	vApplicationGetIdleTaskMemory
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  86              		.fpu fpv5-sp-d16
  88              	vApplicationGetIdleTaskMemory:
  89              	.LVL1:
  90              	.LFB149:
 102:Core/Src/freertos.c **** /* USER CODE END 5 */
 103:Core/Src/freertos.c **** 
 104:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
 105:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
 106:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
 107:Core/Src/freertos.c **** 
 108:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
 109:Core/Src/freertos.c **** {
  91              		.loc 1 109 1 view -0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
 110:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  96              		.loc 1 110 3 view .LVU7
  97              		.loc 1 110 25 is_stmt 0 view .LVU8
  98 0000 034B     		ldr	r3, .L5
  99 0002 0360     		str	r3, [r0]
 111:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
 100              		.loc 1 111 3 is_stmt 1 view .LVU9
 101              		.loc 1 111 27 is_stmt 0 view .LVU10
 102 0004 034B     		ldr	r3, .L5+4
 103 0006 0B60     		str	r3, [r1]
 112:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 104              		.loc 1 112 3 is_stmt 1 view .LVU11
 105              		.loc 1 112 25 is_stmt 0 view .LVU12
 106 0008 8023     		movs	r3, #128
 107 000a 1360     		str	r3, [r2]
 113:Core/Src/freertos.c ****   /* place for user code */
 114:Core/Src/freertos.c **** }
 108              		.loc 1 114 1 view .LVU13
 109 000c 7047     		bx	lr
 110              	.L6:
 111 000e 00BF     		.align	2
 112              	.L5:
 113 0010 00000000 		.word	.LANCHOR0
 114 0014 00000000 		.word	.LANCHOR1
 115              		.cfi_endproc
 116              	.LFE149:
 118              		.section	.bss.xIdleStack,"aw",%nobits
 119              		.align	2
 120              		.set	.LANCHOR1,. + 0
 123              	xIdleStack:
 124 0000 00000000 		.space	512
ARM GAS  C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s 			page 5


 124      00000000 
 124      00000000 
 124      00000000 
 124      00000000 
 125              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 126              		.align	2
 127              		.set	.LANCHOR0,. + 0
 130              	xIdleTaskTCBBuffer:
 131 0000 00000000 		.space	88
 131      00000000 
 131      00000000 
 131      00000000 
 131      00000000 
 132              		.text
 133              	.Letext0:
 134              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\inc
 135              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\inc
 136              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
 137              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 138              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s 			page 6


DEFINED SYMBOLS
                            *ABS*:00000000 freertos.c
C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s:18     .text.vApplicationIdleHook:00000000 $t
C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s:26     .text.vApplicationIdleHook:00000000 vApplicationIdleHook
C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s:40     .text.vApplicationStackOverflowHook:00000000 $t
C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s:47     .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s:61     .text.vApplicationMallocFailedHook:00000000 $t
C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s:68     .text.vApplicationMallocFailedHook:00000000 vApplicationMallocFailedHook
C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s:81     .text.vApplicationGetIdleTaskMemory:00000000 $t
C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s:88     .text.vApplicationGetIdleTaskMemory:00000000 vApplicationGetIdleTaskMemory
C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s:113    .text.vApplicationGetIdleTaskMemory:00000010 $d
C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s:119    .bss.xIdleStack:00000000 $d
C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s:123    .bss.xIdleStack:00000000 xIdleStack
C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s:126    .bss.xIdleTaskTCBBuffer:00000000 $d
C:\Users\seblo\AppData\Local\Temp\ccVVYoPO.s:130    .bss.xIdleTaskTCBBuffer:00000000 xIdleTaskTCBBuffer

NO UNDEFINED SYMBOLS
